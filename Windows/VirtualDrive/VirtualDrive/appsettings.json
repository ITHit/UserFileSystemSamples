{
  // Unique ID of this application.
  // To run more than one instance of this application side-by-side on one machine
  // (aka Corporate Drive and Personal Drive) set a unique ID for each instance.
  "AppID": "VirtualDrive",


  // License to activate the IT Hit User File System Engine. 
  // Set the license content directly as value. Make sure to escape quotes: \":
  // "UserFileSystemLicense": "<?xml version=\"1.0\" encoding=\"utf-8\"?><License...

  //If no license is specified, the Engine will be activated
  // automatically via internet and will function for 5 days. The Engine will stop working after that.
  // To enable a 1-month trial period, download a trial license here: https://userfilesystem.com/download/
  "UserFileSystemLicense": "",


  // Folder that contains file structure to simulate data for your remote storage.
  // In your real-life application you will read data from your cloud storage, database or any other location, instead of this folder.
  // You can specify here both absolute path and path relative to application folder.
  "RemoteStorageRootPath": ".\\RemoteStorage\\",


  // Your virtual file system will be mounted under this path.
  // Make sure to delete the all plceholders created by previous version of the software under the sync root. 
  "UserFileSystemRootPath": "%USERPROFILE%\\VirtualDriveV81\\",


  // Full synchronization interval in milliseconds.
  "SyncIntervalMs": 10000,


  // Maximum number of create/update/read concurrent requests to remote storage. If null then 6 value is used.
  "MaxTransferConcurrentRequests": 6,


  // Maximum number of listing/delete/move concurrent requests to remote storage. If null then int.Max value is used.
  "MaxOperationsConcurrentRequests": null,


  // Automatically lock the file in the remote storage when a file handle is being opened for writing, unlock on close.
  "AutoLock": true


  // Path to external shell extensions COM server executable for app without identity. Can be absolute or relative path.

  // If empty or not set, the system will assume that COM classes are hosted in the current 
  // process (both for app with and without identity). This app starts COM server in this case 
  // to listen to incoming shell extension calls.

  // Uncomment this parameter ONLY in case you need to run the application without identity 
  // AND to host shell extensions in external COM server executable.
  //"ShellExtensionsComServerExePath": "VirtualDrive.ShellExtension.exe"


  // To test performance:
  // 1. Compile the project in the release mode.
  // 2. Run without debugger arrached (Ctrl-F5).
}